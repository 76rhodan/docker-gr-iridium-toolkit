--- iridium-extractor.bck	2024-05-11 18:01:17.727627386 +0200
+++ iridium-extractor	2024-05-11 20:49:44.434503200 +0200
@@ -1,5 +1,6 @@
 #!/usr/bin/python3
 # vim: set ts=4 sw=4 tw=0 et pm=:
+import socket
 import time
 import getopt
 import sys
@@ -10,7 +11,6 @@
 import iridium.iridium_extractor_flowgraph
 
 queue_len_max = 0
-
 out_count = 0
 in_count = 0
 drop_count = 0
@@ -41,13 +41,15 @@
     'rtl': 'cu8',
 }
 
+# Define UDP target IP and port
+UDP_IP = "127.0.0.1"
+UDP_PORT = 5005
 
-def print_stats(tb):
+def print_stats(tb, udp_socket):
     global last_print, queue_len_max, out_count, in_count
     global drop_count, drop_count_total, in_ok_count, out_ok_count, sample_count_total
     global in_ok_count_total, out_ok_count_total, out_count_total, in_count_total, t0
     while True:
-
         queue_len = tb.get_queue_size()
         queue_len_max = tb.get_max_queue_size()
 
@@ -94,18 +96,23 @@
         if offline:
             stats += " | srr: %.1f%%" % (sample_rate_ratio * 100)
         else:
-            stats += " | i: %3d/s" % in_rate
-        stats += " | i_avg: %3d/s" % in_rate_avg
+            stats += " | i: %3d" % in_rate
+        stats += " | i_avg: %3d" % in_rate_avg
         stats += " | q_max: %4d" % queue_len_max
         stats += " | i_ok: %3d%%" % (in_ok_ratio * 100)
-        stats += " | o: %4d/s" % out_rate
-        stats += " | ok: %3d%%" % (out_ok_ratio * 100)
-        stats += " | ok: %3d/s" % ok_rate
+        stats += " | o: %4d" % out_rate
+        stats += " | okr: %3d%%" % (out_ok_ratio * 100)
+        stats += " | okp: %3d" % ok_rate
         stats += " | ok_avg: %3d%%" % (ok_ratio_total * 100)
-        stats += " | ok: %10d" % out_ok_count_total
-        stats += " | ok_avg: %3d/s" % ok_rate_avg
+        stats += " | okt: %10d" % out_ok_count_total
+        stats += " | okt_avg: %3d" % ok_rate_avg
         stats += " | d: %d" % drop_count_total
         print(stats, file=sys.stderr)
+
+        # Send stats via UDP
+        stats_bytes = stats.encode()
+        udp_socket.sendto(stats_bytes, (UDP_IP, UDP_PORT))
+
         if not offline and sample_rate_ratio < 0.98 and (last_print - t0) > 3:
             print("WARNING: your SDR seems to be losing samples. ~%dk samples lost (%.0f%%)" % (sample_rate * (1 - sample_rate_ratio) / 1000, (1 - sample_rate_ratio) * 100), file=sys.stderr)
         sys.stderr.flush()
@@ -354,7 +361,10 @@
                                                        samples_per_symbol=samples_per_symbol,
                                                        config=cfg)
 
-    statistics_thread = threading.Thread(target=print_stats, args=(tb,))
+    # Create UDP socket
+    udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
+
+    statistics_thread = threading.Thread(target=print_stats, args=(tb, udp_socket))
     statistics_thread.daemon = True
     statistics_thread.start()
 
